import { jsx as i, jsxs as x } from "react/jsx-runtime";
import * as a from "react";
import { useFloating as w, offset as k, shift as S, flip as $, autoUpdate as y } from "@floating-ui/react-dom";
import f from "styled-components";
import { useIntersection as v } from "../hooks/useIntersection.js";
import { Box as d } from "../Box/Box.js";
import { Portal as P } from "../Portal/Portal.js";
const T = [
  "top",
  "top-start",
  "top-end",
  "right",
  "right-start",
  "right-end",
  "bottom",
  "bottom-start",
  "bottom-end",
  "left",
  "left-start",
  "left-end"
], W = f(d)`
  box-shadow: ${({ theme: t }) => t.shadows.filterShadow};
  z-index: ${({ theme: t }) => t.zIndices[0]};
  border: 1px solid ${({ theme: t }) => t.colors.neutral150};
  background: ${({ theme: t }) => t.colors.neutral0};
`, C = ({ source: t, children: e, spacing: o = 0, fullWidth: r = !1, placement: s = "bottom-start", centered: n = !1, ...l }) => {
  const [p, u] = a.useState(void 0), { x: h, y: m, reference: c, floating: b, strategy: g } = w({
    strategy: "fixed",
    placement: n ? "bottom" : s,
    middleware: [
      k({
        mainAxis: o
      }),
      S(),
      $()
    ],
    whileElementsMounted: y
  });
  return a.useLayoutEffect(() => {
    c(t.current);
  }, [t, c]), a.useLayoutEffect(() => {
    r && u(t.current.offsetWidth);
  }, [r, t]), i(W, { ref: b, style: {
    left: h,
    top: m,
    position: g,
    width: p || void 0
  }, hasRadius: !0, background: "neutral0", padding: 1, ...l, children: e });
}, E = ({ children: t, intersectionId: e, onReachEnd: o, ...r }) => {
  const s = a.useRef(null);
  return v(s, o ?? (() => {
  }), {
    selectorToWatch: `#${CSS.escape(e ?? "")}`,
    skipWhen: !e || !o
  }), x(R, { ref: s, ...r, children: [t, e && o && i(d, { id: CSS.escape(e), width: "100%", height: "1px" })] });
}, R = f(d)`
  // 16 is base base size, 3 is the factor to get closer to 40px and 5 is the number of elements visible in the list
  max-height: ${3 * 5}rem;
  overflow-y: auto;
  overflow-x: hidden;

  &::-webkit-scrollbar {
    -webkit-appearance: none;
    width: 4px;
  }

  &::-webkit-scrollbar-track {
    background: ${({ theme: t }) => t.colors.neutral0};
  }

  &::-webkit-scrollbar-thumb {
    background: ${({ theme: t }) => t.colors.neutral150};
    border-radius: ${({ theme: t }) => t.borderRadius};
    margin-right: 10px;
  }
`, B = ({ children: t, source: e, spacing: o, fullWidth: r, placement: s, centered: n, ...l }) => i(P, { children: i(C, { source: e, spacing: o, fullWidth: r, placement: s, centered: n, children: i(E, { ...l, children: t }) }) });
export {
  C as Content,
  T as POPOVER_PLACEMENTS,
  B as Popover,
  E as Scrolling
};
