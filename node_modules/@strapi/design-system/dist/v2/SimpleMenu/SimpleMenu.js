import { jsxs as h, jsx as i } from "react/jsx-runtime";
import { useRef as g, useState as x } from "react";
import { Root as S, Trigger as C, Content as M, Item as R } from "./Menu.js";
import * as b from "./Menu.js";
import { useId as j } from "../../hooks/useId.js";
import { useIntersection as y } from "../../hooks/useIntersection.js";
const O = ({ children: c, id: f, onOpen: t, onClose: n, popoverPlacement: m, onReachEnd: o, ...r }) => {
  const l = g(null), [a, p] = x(!1), u = (e) => {
    o && o(e);
  }, d = (e) => {
    e && typeof t == "function" ? t() : !e && typeof n == "function" && n(), p(e);
  }, I = j(f), s = `intersection-${CSS.escape(I)}`;
  return y(l, u, {
    selectorToWatch: `#${s}`,
    /**
     * We need to know when the select is open because only then will viewportRef
     * not be null. Because it uses a portal that (sensibly) is not mounted 24/7.
     */
    skipWhen: !a
  }), h(S, { onOpenChange: d, children: [i(C, { ...r, children: r.label }), i(M, { intersectionId: s, popoverPlacement: m, children: c })] });
}, P = R;
export {
  b as Menu,
  P as MenuItem,
  O as SimpleMenu
};
